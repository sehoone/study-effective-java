package chapter9.item67;

public class Item67Main {

	public static void main(String[] args) throws Exception {
		/**
		 * 최적화는 신중히 해라
		 * 
		 * 최적화는 좋은 결과보다는 해로운 결과로 이어지기 쉽다.
		 * 
		 * 빠른 프로그램 보다는 좋은 프로그램(견고한 구조)을 작성하는 것이 더 중요하다. 
		 * ITEM 15 좋은 프로그램은 정보 은닉 원칙을 따라 개별 구성요소를 독립적으로 설계할 수 있고, 다른 요소에 영향을 주지 않고도 다시 설계할 수 있다. 
		 * 아키텍처의 결함이 성능을 제한하는 상황이면, 시스템 전체를 다시 구현해야 할 수도 있다. 반드시, 설계 단계에서 성능을 고려해야 한다.
		 * 
		 * API 설계시 성능에 주는 영향을 고려해라
		 * ITEM 50 내부 데이터를 변경할 수 있게 만들면 불필요한 방어적 복사를 수없이 유발할 수 있다.
		 * ITEM 18 컴포지션으로 해결할 수 있음에도 상속 방식으로 설계한 클래스는 상위 클래스에 종속되며, 성능 제약까지도 물려받는다.
		 * ITEM 64인터페이스도 있는데 굳이 구현 타입을 사용하는 것은 좋지 않다.
		 * 
		 * 빠른 프로그램을 작성하려 안달하지 말자. 좋은 프로그램을 작성하다 보면 성능은 따라오게 마련이다.
		 * 하지만 시스템을 설계할때, 특히 API, 네트워크 프로토콜, 영구 저장용 데이터 포맷을 설계할떄는 성능을 염두헤 두어야한다.
		 * 
		 */
		
	}
}
